#!/usr/bin/env python3
import json
import logging
import os
from pathlib import Path
from bs4 import BeautifulSoup


logging.basicConfig(
    level=os.getenv('LOG_LEVEL', 'INFO'),
    format=(
        '[%(levelname)s] %(asctime)s '
        '(%(funcName)s:%(lineno)s) '
        '%(message)s'
    )
)
logger = logging.getLogger(__name__)


def main():
    data_dir = Path('data')
    input_path = data_dir / 'kanjidic.xml'
    output_path = data_dir / 'kanjidic.jsonl'
    convert_records(input_path, output_path)


def convert_records(input_path, output_path):
    logger.info('Converting KANJIDIC ...')
    stream = input_stream(input_path)
    stream = record_adapter(stream)
    stream = stream_writer(stream, output_path)
    read_stream(stream)
    logger.info('Converted KANJIDIC')


def input_stream(path):
    with open(path) as file:
        record = None
        recording = False
        for line in file:
            if recording:
                record.append(line)
                if line.strip() == '</character>':
                    recording = False
                    yield ''.join(record)
            elif line.strip() == '<character>':
                recording = True
                record = [line]


def record_adapter(stream):
    for record in stream:
        yield build_record(soup(record))


def build_record(el):
    return [
        text_one(el, 'literal'),
        build_codepoint(el_one(el, 'codepoint')),
        build_radical(el_one(el, 'radical')),
        build_misc(el_one(el, 'misc')),
        build_dic_number(el_one(el, 'dic_number')),
        build_query_code(el_one(el, 'query_code')),
        build_reading_meaning(el_one(el, 'reading_meaning'))
    ]


def build_codepoint(el):
    return [
        el_all_map(el, 'cp_value', build_cp_value)
    ]


def build_cp_value(el):
    return [
        el_text(el),
        el.get('cp_type')
    ]


def build_radical(el):
    return [
        el_all_map(el, 'rad_value', build_rad_value)
    ]


def build_rad_value(el):
    return [
        el_text(el),
        el.get('rad_type')
    ]


def build_misc(el):
    return [
        int_one(el, 'grade'),
        int_all(el, 'stroke_count'),
        el_all_map(el, 'variant', build_variant),
        int_one(el, 'freq'),
        text_all(el, 'rad_name'),
        int_one(el, 'jlpt')
    ]


def build_variant(el):
    return [
        el_text(el),
        el.get('var_type')
    ]


def build_dic_number(el):
    return [
        el_all_map(el, 'dic_ref', build_dic_ref)
    ]


def build_dic_ref(el):
    return [
        el_text(el),
        el.get('dr_type'),
        get_m_vol(el),
        get_m_page(el)
    ]


def get_m_vol(el):
    try:
        return int(el.get('m_vol'))
    except (TypeError, ValueError):
        return None


def get_m_page(el):
    try:
        return int(el.get('m_page'))
    except (TypeError, ValueError):
        return None


def build_query_code(el):
    return [
        el_all_map(el, 'q_code', build_q_code)
    ]


def build_q_code(el):
    return [
        el_text(el),
        el.get('qc_type'),
        el.get('skip_misclass')
    ]


def build_reading_meaning(el):
    return [
        el_all_map(el, 'rmgroup', build_rmgroup),
        text_all(el, 'nanori')
    ]


def build_rmgroup(el):
    return [
        el_all_map(el, 'reading', build_reading),
        el_all_map(el, 'meaning', build_meaning)
    ]


def build_reading(el):
    return [
        el_text(el),
        el.get('r_type'),
        el.get('on_type'),
        el.get('r_status')
    ]


def build_meaning(el):
    return [
        el_text(el),
        el.get('m_lang', 'en')
    ]


def soup(markup):
    return BeautifulSoup(markup, features='lxml')


def float_all(el, key):
    return el_all_map(el, key, el_float)


def int_all(el, key):
    return el_all_map(el, key, el_int)


def text_all(el, key):
    return el_all_map(el, key, el_text)


def el_all_map(el, key, func):
    return list(filter(None, map(func, el_all(el, key))))


def el_all(el, key):
    return el.find_all(key) if el else []


def float_one(el, key):
    return el_float(el_one(el, key))


def int_one(el, key):
    return el_int(el_one(el, key))


def text_one(el, key):
    return el_text(el_one(el, key))


def el_one(el, key):
    return el.find(key) if el else None


def el_float(el):
    try:
        return float(el_text(el) or '')
    except ValueError:
        return None


def el_int(el):
    try:
        return int(el_text(el) or '')
    except ValueError:
        return None


def el_text(el):
    return el.text.strip() if el and el.text else None


def stream_writer(stream, path, write=None):
    write = write or write_json
    with open(path, 'w') as file:
        for record in stream:
            write(record, file)
            yield record


def write_json(obj, file):
    file.write(f'{json.dumps(obj, ensure_ascii=False)}\n')


def read_stream(stream):
    for record in stream:
        pass


if __name__ == '__main__':
    main()
